<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[为什么要用SpringBoot?]]></title>
    <url>%2Fblog%2F2019%2F03%2F13%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8SpringBoot%2F</url>
    <content type="text"><![CDATA[传统的javaEE的web项目用的是ssm框架，用这种框架布置的微服务架构使用方便，管理也是一目了然。解耦性也很高，解决了javeEE项目开发的效率问题，让程序员能在短时间内搭建起一个web项目。但是随着使用ssm框架熟练的增加，程序员对框架内部配置繁多的xml文件感到烦不胜烦。首先，因为是一个web项目，所以有一个web.xml文件，这里面配置的是过滤器，servlet，监听器，和初始化加载文件等等….而这还只是web.xml的最基本配置，如果你想拥有其他服务，代码量还得往上加。其次，ssm框架的每一个环节，都有需要配置文件。首先来看看ssm的第一个s:spring。它的作用是ioc和aop，因此在项目中用到的所有的bean你都需要交给它托管，这样一来，第一个‘s’就会产生很多个xml文件;第二个s:springmvc，它的作用的拦截用户请求。其实质上就是一个servlet，只不过它的工作流程由三个类（dispachservlet、handlemapping、modleandview）来结合完成。因此也会有一个属于它的xml文件。该文件配置的是springmvc对于用户请求的拦截规则和其他功能等等…；第三个m:mybatis，作为持久层的一个框架，也需要有一个xml文件。不过因为mybatis提供的逆向工程的功能，该xml文件的内容手写方面很少。听起来光是搭个架子工作量就非常大是不是？真的实践起来也是如此麻烦，往往架子搭建完成，已经没有脑细胞去实现业务的编码了。而且每次往项目里面增加功能，引入新的jar包，都需要再创建新的xml文件，虽然这样做便于管理，但这xml已经占满了你的大脑。:)为此，springboot横空出世。它的理念就是完全不需要xml文件，用java自带的注释来取代这一切xml文件的配置。而且springboot还是一个全家桶，它里面装了javaEE开发需要的一系列jar包和插件，比如tomcat，jpa，mysql等等等等..意味着如果使用springboot来开发javaEE项目，搭架子不再是一个麻烦的事情，这就为程序员腾出了时间和精力用来更好的完善业务。当然，刚用它还是挺不方便的，因为注释太多而且以前大多都没有接触过，因此需要时间来熟悉。]]></content>
  </entry>
  <entry>
    <title><![CDATA[个人微博的诞生]]></title>
    <url>%2Fblog%2F2019%2F03%2F10%2F%E4%B8%AA%E4%BA%BA%E5%BE%AE%E5%8D%9A%E7%9A%84%E8%AF%9E%E7%94%9F%2F</url>
    <content type="text"><![CDATA[今天弄了好几个小时的hexo+github的个人博客，本来思路是很清楚的，就是首先配置需要的环境例如node.js，git….等等，然后再把他们按照规定的方式衔接起来。比如hexo与github的衔接，就是靠ssh的密匙。心里想着按着这个思路弄很快就能出成果。可谁知道还是踩了不少坑。 首先是hexo的安装配置流程不熟悉，相关命令后面的参数不清楚，导致浪费了很多时间。其次是在配置hexo的_config.yml文件上也吃了一些亏，总的来说是自己不细心，更是因为首先心理预期很轻松，但是实际操作不顺畅，导致越急越错，越错越急。 github的配置倒是很顺利。 总的来说，这个博客网站还是搭建起来了。 记录一下，纯粹的抒发一下心中的愤懑。 不过还是比较有成就感，算是在互联网大潮中有了自己的一块小地方。]]></content>
  </entry>
</search>
